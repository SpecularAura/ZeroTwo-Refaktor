# -*- coding: utf-8 -*-
"""job_recommend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1asM0N-H_Fq1PZZJB9lcbQdtBAKWD-Aic
"""

import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from nltk.corpus import stopwords
import string
import json

data = pd.read_csv("/content/jobs.csv")

data = data.drop("Unnamed: 0",axis=1)

data.isnull().sum()

from sklearn.feature_extraction import text
feature = data["Key Skills"].tolist()
tfidf = text.TfidfVectorizer(input=feature, stop_words="english")
tfidf_matrix = tfidf.fit_transform(feature)
similarity = cosine_similarity(tfidf_matrix)

indices = pd.Series(data.index, index=data['Job Title']).drop_duplicates()

def jobs_recommendation(Title, similarity = similarity):
    index = indices[Title]
    similarity_scores = list(enumerate(similarity[index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[::], reverse=True)
    similarity_scores = similarity_scores[0:5]
    newsindices = [i[0] for i in similarity_scores]
    return data[['Job Title', 'Job Experience Required', 
                 'Key Skills']].iloc[newsindices]

def search_term_if_not_found(term):
	result_df = data[data['Job Title'].str.contains(term)]
	return result_df

def predict_job(search_term):
  if search_term is not None:
        try:
          results = jobs_recommendation(search_term)
          jresult = json.dump(results)
          return jresult
        except:
          results= "Not Found"
          result_df = search_term_if_not_found(search_term)
          result_df = result_df.to_json()
          jresultx = json.dumps(result_df)
          return jresultx

result = predict_job("Software Dev")
print(result)